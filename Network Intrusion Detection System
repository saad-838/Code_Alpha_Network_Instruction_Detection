import scapy.all as scapy
from collections import defaultdict
from datetime import datetime, timedelta
import logging
import smtplib
from email.mime.text import MIMEText
import threading
import time
import json
from http.server import HTTPServer, BaseHTTPRequestHandler

# Configuration
CONFIG = {
    "interface": None,  # Auto-detect if None
    "home_network": "192.168.1.0/24",
    "suspicious_ports": [22, 23, 3389, 5900, 8080],
    "thresholds": {
        "port_scan": 15,      # Alert if >15 ports scanned
        "syn_flood": 100,     # Alert if >100 SYN packets/sec
        "auth_attempts": 10   # Alert if >10 auth attempts/min
    },
    "email_alerts": {
        "enabled": False,
        "smtp_server": "smtp.example.com",
        "smtp_port": 587,
        "username": "your_email@example.com",
        "password": "your_password",
        "recipient": "admin@example.com"
    },
    "web_dashboard": {
        "enabled": True,
        "port": 8080
    }
}

# Global state for tracking
activity_tracker = defaultdict(lambda: {
    "ports": set(),
    "syn_count": 0,
    "auth_attempts": 0,
    "last_syn": datetime.now(),
    "last_alert": None
})

alerts_log = []

# Detection patterns
SUSPICIOUS_PAYLOADS = {
    "sql_injection": [
        b"union select", b"1=1", b"select * from",
        b"insert into", b"drop table", b"' or '1'='1"
    ],
    "xss": [
        b"<script>", b"javascript:", b"onerror=",
        b"alert(", b"document.cookie"
    ],
    "directory_traversal": [
        b"../", b"..\\", b"/etc/passwd", b"cmd.exe"
    ]
}

class AlertHandler:
    @staticmethod
    def log_alert(alert_type, src_ip, details=""):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message = f"[{timestamp}] {alert_type} detected from {src_ip} {details}"
        
        # Add to alerts log
        alerts_log.append({
            "timestamp": timestamp,
            "type": alert_type,
            "source": src_ip,
            "details": details
        })
        
        # Print to console
        print(f"\n[!] ALERT: {message}")
        
        # Log to file
        logging.warning(message)
        
        # Send email if configured
        if CONFIG["email_alerts"]["enabled"]:
            AlertHandler.send_email_alert(f"IDS Alert: {alert_type}", message)

    @staticmethod
    def send_email_alert(subject, body):
        try:
            msg = MIMEText(body)
            msg['Subject'] = subject
            msg['From'] = CONFIG["email_alerts"]["username"]
            msg['To'] = CONFIG["email_alerts"]["recipient"]
            
            with smtplib.SMTP(CONFIG["email_alerts"]["smtp_server"], 
                             CONFIG["email_alerts"]["smtp_port"]) as server:
                server.starttls()
                server.login(CONFIG["email_alerts"]["username"], 
                           CONFIG["email_alerts"]["password"])
                server.sendmail(CONFIG["email_alerts"]["username"], 
                              CONFIG["email_alerts"]["recipient"], 
                              msg.as_string())
        except Exception as e:
            logging.error(f"Failed to send email alert: {str(e)}")

class PacketAnalyzer:
    @staticmethod
    def analyze_packet(packet):
        try:
            if packet.haslayer(scapy.IP) and packet.haslayer(scapy.TCP):
                src_ip = packet[scapy.IP].src
                dst_ip = packet[scapy.IP].dst
                dst_port = packet[scapy.TCP].dport
                payload = bytes(packet[scapy.TCP].payload)
                
                # Update activity tracker
                tracker = activity_tracker[src_ip]
                tracker["ports"].add(dst_port)
                
                # Check for SYN packets (potential scans)
                if packet[scapy.TCP].flags == "S":
                    tracker["syn_count"] += 1
                    tracker["last_syn"] = datetime.now()
                    
                    # Check for SYN flood
                    time_diff = (datetime.now() - tracker["last_syn"]).total_seconds()
                    if (tracker["syn_count"] > CONFIG["thresholds"]["syn_flood"] and 
                        time_diff < 1 and 
                        (tracker["last_alert"] is None or 
                         (datetime.now() - tracker["last_alert"]) > timedelta(minutes=1))):
                        AlertHandler.log_alert("SYN Flood", src_ip, 
                                            f"({tracker['syn_count']} SYN packets)")
                        tracker["last_alert"] = datetime.now()
                
                # Check for port scanning
                if (len(tracker["ports"]) > CONFIG["thresholds"]["port_scan"] and 
                    (tracker["last_alert"] is None or 
                     (datetime.now() - tracker["last_alert"]) > timedelta(minutes=1))):
                    AlertHandler.log_alert("Port Scan", src_ip, 
                                        f"({len(tracker['ports'])} ports scanned)")
                    tracker["last_alert"] = datetime.now()
                
                # Check for suspicious payloads
                for attack_type, patterns in SUSPICIOUS_PAYLOADS.items():
                    for pattern in patterns:
                        if pattern in payload.lower():
                            AlertHandler.log_alert(attack_type.upper(), src_ip, 
                                                f"to {dst_ip}:{dst_port}")
                            break
                
                # Check for authentication attempts on suspicious ports
                if dst_port in CONFIG["suspicious_ports"]:
                    if b"login" in payload.lower() or b"password" in payload.lower():
                        tracker["auth_attempts"] += 1
                        
                        if (tracker["auth_attempts"] > CONFIG["thresholds"]["auth_attempts"] and 
                            (tracker["last_alert"] is None or 
                             (datetime.now() - tracker["last_alert"]) > timedelta(minutes=1))):
                            AlertHandler.log_alert("Brute Force Attempt", src_ip, 
                                                f"on port {dst_port}")
                            tracker["last_alert"] = datetime.now()
        
        except Exception as e:
            logging.error(f"Error analyzing packet: {str(e)}")

class DashboardHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        
        # Return last 20 alerts
        response = {
            "status": "running",
            "alerts": alerts_log[-20:],
            "stats": {
                "tracked_ips": len(activity_tracker),
                "total_alerts": len(alerts_log)
            }
        }
        
        self.wfile.write(json.dumps(response).encode())

def start_dashboard():
    if CONFIG["web_dashboard"]["enabled"]:
        server = HTTPServer(('localhost', CONFIG["web_dashboard"]["port"]), DashboardHandler)
        threading.Thread(target=server.serve_forever, daemon=True).start()
        print(f"[*] Dashboard available at http://localhost:{CONFIG['web_dashboard']['port']}")

def monitor_traffic():
    print("[*] Starting network traffic monitoring...")
    print("[*] Press Ctrl+C to stop\n")
    
    try:
        scapy.sniff(
            iface=CONFIG["interface"],
            prn=PacketAnalyzer.analyze_packet,
            store=False
        )
    except KeyboardInterrupt:
        print("\n[*] Stopping IDS")
    except Exception as e:
        logging.error(f"Monitoring error: {str(e)}")
        print(f"[!] Error: {str(e)}")

if __name__ == "__main__":
    # Initialize logging
    logging.basicConfig(
        filename='ids.log',
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        filemode='w'
    )
    
    # Start web dashboard
    start_dashboard()
    
    # Start monitoring
    monitor_traffic()